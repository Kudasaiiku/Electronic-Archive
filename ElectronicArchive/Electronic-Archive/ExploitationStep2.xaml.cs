using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

// Добавленные using.
using System.Data.SqlClient;
using System.Data;
using System.IO;
using System.Diagnostics;
using OfficeOpenXml;
using OfficeOpenXml.Style;
using Microsoft.Win32;
using System.Reflection;

namespace Electronic_Archive
{
    /// <summary>
    /// Логика взаимодействия для ExploitationStep2.xaml
    /// </summary>
    public partial class ExploitationStep2 : Window
    {
        public ExploitationStep2()
        {
            InitializeComponent();

            LoadExplData();

            Trash.IsEnabled = false;
        }

        public void LoadExplData()
        {
            using (SqlConnection connection = new SqlConnection("Data Source=localhost;Initial Catalog=Archive;Integrated Security=True"))
            {
                connection.Open();

                SqlDataAdapter adapter = new SqlDataAdapter();
                adapter.SelectCommand = new SqlCommand("SELECT * FROM Exploitation WHERE ДН ='" + DNValue.DN_value + "'", connection);

                DataTable dataTable = new DataTable();
                adapter.Fill(dataTable);

                List<Expl> explList = new List<Expl>();

                foreach (DataRow row in dataTable.Rows)
                {
                    Expl explItem = new Expl
                    {
                        ID = Convert.ToInt32(row["ID_expl"]),
                        DN = row["ДН"].ToString(),
                        Применяемость = row["Применяемость"].ToString(),
                        Первичная = row["Первичная"].ToString()
                    };

                    explList.Add(explItem);
                }

                ExplGrid.ItemsSource = explList;
            }
        }
        public class Expl
        {
            public int ID { get; set; }
            public string DN { get; set; }
            public string Применяемость { get; set; }
            public string Первичная { get; set; }
        }

        private void ExplGrid_Loaded(object sender, RoutedEventArgs e)
        {
            foreach (DataGridColumn column in ExplGrid.Columns)
            {
                column.Width = new DataGridLength(1.0, DataGridLengthUnitType.Star);
            }
        }

        private void CellContextMenu_CopyValue(object sender, RoutedEventArgs e)
        {
            MenuItem menuItem = e.OriginalSource as MenuItem;
            ContextMenu contextMenu = menuItem?.Parent as ContextMenu;
            DataGridCell cell = contextMenu?.PlacementTarget as DataGridCell;

            if (cell != null && cell.Content is TextBlock textBlock)
            {
                string cellValue = textBlock.Text;

                Clipboard.SetText(cellValue); // Копирование значения в буфер обмена
            }
        }

        private void Save_Click(object sender, RoutedEventArgs e)
        {
            if (IsAllTextBoxesFilled())
            {
                string _DN;
                string _Expl;
                string _First;

                _DN = DNValue.DN_value;
                _Expl = Convert.ToString(ExplBox.Text);
                if (FirstBox.IsChecked == true)
                    _First = "Да";
                else
                    _First = "Нет";

                using (SqlConnection connection = new SqlConnection("Data Source=localhost;Initial Catalog=Archive;Integrated Security=True"))
                {
                    connection.Open();

                    using (SqlCommand command = new SqlCommand("INSERT INTO Exploitation (ДН, Применяемость, Первичная) VALUES('" + _DN + "', '" + _Expl + "', '" + _First + "')", connection))
                    {
                        command.ExecuteNonQuery();
                    }
                }

                ExplBox.Text = "";

                LoadExplData();
            }
            else
            {
                MessageBox.Show("Добавьте применяемость!", "Ошибка!", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        // Проверка на заполненность всех TextBox.
        private bool IsAllTextBoxesFilled()
        {
            foreach (var element in grid.Children)
            {
                if (element is TextBox textBox && string.IsNullOrEmpty(textBox.Text))
                {
                    return false;
                }
            }
            return true;
        }

        int _id;
        string _dn;

        private void Trash_Click(object sender, RoutedEventArgs e)
        {
            var warning2 = new Warning2();
            bool? result = warning2.ShowDialog();

            if (result == true)
            {
                using (SqlConnection connection = new SqlConnection("Data Source=localhost;Initial Catalog=Archive;Integrated Security=True"))
                {
                    connection.Open();

                    // Запрос в БД.
                    string query = "DELETE FROM Exploitation WHERE ДН = @DN and ID_expl = @ID;";

                    using (SqlCommand command = new SqlCommand(query, connection))
                    {
                        command.Parameters.AddWithValue("@DN", _dn);
                        command.Parameters.AddWithValue("@ID", _id);
                        command.ExecuteNonQuery();
                    }
                }

                LoadExplData();
            }
            else if (result == false)
            {
                // Действия при выборе "Нет"
                warning2.Close(); // Закрытие пользовательского окна сообщения
            }
        }

        private void ExplGrid_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (ExplGrid.SelectedItem != null)
            {
                Expl selectedCard = (Expl)ExplGrid.SelectedItem;
                _dn = selectedCard.DN;
                _id = selectedCard.ID;
                Trash.IsEnabled = true;
            }
            else
            {
                Trash.IsEnabled = false; // Отключение кнопки Trash, если строка не выделена
            }
        }
    }
}
